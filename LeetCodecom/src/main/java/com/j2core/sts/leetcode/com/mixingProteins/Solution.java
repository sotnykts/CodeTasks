package com.j2core.sts.leetcode.com.mixingProteins;

import org.junit.Assert;
import org.junit.Test;

import java.util.*;

public class Solution {

    String pmixTLE(String s, int k) {

        HashMap<Character, HashMap<Character, Character>> proteinMap = createProteinMutationMap();

        char[] protein = s.toCharArray();
        char[] mutateProtein = new char[protein.length];
        char[] tmp;

        while (k-- > 0){
            for (int i = 0; i < s.length(); i++){
                if (i == s.length()-1){
                    mutateProtein[i] = proteinMap.get(protein[i]).get(protein[0]);
                }else {
                    mutateProtein[i] = proteinMap.get(protein[i]).get(protein[i+1]);
                }
            }
            tmp = protein;
            protein = mutateProtein;
            mutateProtein = tmp;
        }

        return String.valueOf(protein);
    }

    @Test
    public void test(){

        Assert.assertEquals("DDDDA", pmix("AAAAD", 15));

        Assert.assertEquals("BCBCBCBCBCBCBCBC", pmix("ABCBCABABBAAABBC", 14));

        Assert.assertEquals("BCBCBCBCBCBCBCBC", pmix("BADBADBDDDCDDBBBBADBBBACDCDCDBBADBDBBDCAABCCDACADBCCADCCAABBDDCDAACADBAACADACCACDCCCCCBDABBCADCBCAADAAAAABABBABCCDABABDABDACADACDABDABBBCADCDDBDBABCADACBCCAADCADADCBACBACCBBCCDDAABCBABCAACDADDABCBBCBABCDCCCAABCCDDABDCCABBCBDADBCDBBBBACACCCBBDACBBDDDADCCBCADBCCDBBBCDDBBBBDBCBDCDCAAAABCDCAABBDCDCADCBCBACACCABDCACBDCCBBCDABBAABBBBACADDCADADCDBCDCDABDBCDABCCBCCDABBCDBACDDCDDBBCACABCCACADCCACBCBACDBDADBAACABBBBBDBABDACBBADAACCBDADCCBBBCBCCDDDAACAADDDABADBCADBAABBBAADCDABDDDBBDBDBABBDDCCAADACDDDDDACDAACBDBDADBBDAADACCCABBCBBCDDACACBBDBDDBADCCADBCADDBCCBACDCACBDDBDABDDCDADCBCCDDBABCAACCCDADADDDDCDCAACAAAABBABAADBDDCDDADCDBCCBBCCCAACDDCCBACCDABCCDDCBDBBBADDBCAADBDDAAABDDBADBBBCBAACAADACBCDACADDDCAABDDBCBDBCBDDABBACBCDACCCACBCCBBBAAABDBCACACABCDCDBCCCABDCDACBDADCBCDBBBCBCADDAABCABADCACBADCDADBBDBCDCDDACDCBADAACBCCADDBDDDBBCCDDACDACDACDDCBBBBABDACDBDCCADBCADBAADDCDDCBCBCBCBCBDABBADBAADBDADCCDCDBCAACADDCCAAACADCDADADDCDABBBDCBDADABCACDCDCDDCACBACAAABBBADBBDCCCCDDCDBDCBACBCDABCACBABBCCCABCADBDCBDDCADABCBBABCCDAACCCDCBBADBBCABAADCDACBCDBDDBBABDBABADDBADBBDBBBCBDAAADBBADDDBDCDCBDAADCBBDCCDCDBACADCDDDCCDBBBCCBBADCDCDDCADDACDCDDBAADBCDDBBACDBDBDCBDCDACDACDCCABAAABCACDACAADBCDCADBCDDBABAACBCACCBDDBADCCDAACACBCAACBBBADCABBADDDDDCDBAAADBDADBBDBAAACBADDCDABAAACCDCACCCDBACBDDACAACACDDADBDDACCADBCACBABDADCDCADCAAACCABBCCCACCBBCCDCACABCBCBDCCAAABBADBCBBDDAABADBCDDCCDBDBCACCCDACBDBAABBBDCCDBACBABBCCAADACBDADDBABCDABDCCBAABCABBABBABBDCCADBCBADCDBBBDDADDDCBAACDCAACCCACBADDCADCABCAABADCCDADAACCADABDADDBDBBDACBBCCBAABAAADDBCBBAABAABBAADDCCDBADCBACDDCAACCACBADBCAADCCAABDBDBDDCAAABBBCCAACCCBCDCCCADBCBBCADDADDCCBBCDCDAADBCCCDBCBDCAACBBBBCABDACCDBABBDAACABDCAACCADBCDBACCBADACDBBCBBDCCDBCDCCCCDACABDDBABCADADCBDABBBCADBACBDDADBBDBCDCCCCBCBADDDDACCBDCDCDDABBCBDBCAAACCCCBACDDACAADADACBBCCCBBCBACDBBDDDACCDCDACBDCCCADDAADBDCDAADACBCCACDBDDBCBCBDDDBACCACCACACDCDCADABBBBCBAADCDBABBBADCBBBBACCABBDDABCBADCADAAADACBACBCDBCBCAABDBCADAABBCBDAADBCBDADABABAAADDCDCBCBADADADCACCDABACABDCBBCACBAACDABCADDDBCDCADDCBBBCCABDACABCABCACCCCACCDCCCCDADBCCACCADCBDABACBDAADBBCCDACDBCBABDCAADDBBDDBDABBCBCAACBDBDBBACDDDDCAACCBDAACACADBCCCCDDBBDDADBAAAABBDCCBDBDCBDDCCCCDCADABABACDDCDAABCBCCCDCDAADAADCDCCAACBCDDBBCDABBABDADBDBCCAAABDDBBDADCCADABDBBDBACDCABCADDBDBBBCDBACCDCCDAADAADBDDDCCCCCBCBABCDBBDACAABBDCACDBDDAACBBABBBBCADDBCADADCCCCABACAADCDABCCCDACCBAABCBBBAAABBDCABBCBDDBDDCABBAAADDAADAACCADDCDADBBCACBDACCBDDDAACABCADDBBAABABCDBCAACCCDADBDCDBCCDACCCADAABDBBDDCCDABAAAACACCBCCBADCBADADDCAACDAAACDBBDBCCAADBDAAACBDACABADCDAADCABDCCBCCDBDDABACDCBDCDCCDACBDBCABCDDAABDAAABACCBAACCACABAABDCDDAAABDADCCADABBACDBCCBABBCBBBDADDBBDCCADAABBBCACBDADBABCDBCCACAAACBAABCAABCCDCADBBDCACDDDADCBCCACAABCBDCBCDCBABAADBDCAAAAABCADCCABCDAAABBADBBDABDAACADCACBACCADCABAAADBDBAADBDDAACDCCCDDBABDCCCDDAAAADDCACCBADABAAAABBADAABBDABBBBCAAACCDCCBCBCACBDBDCBBDCABCDCBCBCADBBCCCDCCDBACACCDCBCADACABBBDACBBADCBDABDDBBCCBCBACDBDDCBBDDCCABBDDDCCDCABBCADBBADDDBACDCACDADDDDBCBDBAACCACDCCDBDCAAACCCCDBAAAACBDBABAABCCDBDCCCCDCCDBABACACCACADDBADBCBBCCBDADBDBDBCCADCCDDDBDCDCDACDBBCBDCDCDAABCCBBCACDDABDDCADBCBCCABDADBAABABABCBACBADDABADDBBBACDDBDADCBDCAADDDBABADDDCACBACCCAACDABDBBBAAABADCAABBCAACDDADABCDADACDDBBDCCADCABBBCAAAACCBBDBBBABDDBCBBCCBDBABBCBABABBBCDABDABBAADDDAADDBBADCABCACADCBDDDBBACBDDBAAABBABACACCCABBCAAAADCBDCCCDDDBADBCBDDCBBABDAAABBCCADCBDCCBCADDDCCBADDDBBDDCCAACBCCCAAADBCCDABBCCAAACBDADACCDDBDDBBAADDCDCCAACACDDADDDCBADCCDBBCADACCAACCDABACCCDDADCDCCCDDDCADADCDDDDBDBDAACADDCABACCBBDBCADBBABDDCABDBCBBBBCADBBDBDBDADBBABABACABACBBADACCBBAAAACCCCDDACACCDBCCBBBBBCAADADBADBBDDDADDCCBDCDAADDBACAACACBDDDBDDCCBDCCCBACCCDCACDDABBAABABCBCAADBCDAABABABCDAACCBBBCBCDADCBDCBCCBCBCACBCBADDDDACDCDDDAAAABADBDCBCCADDBABBADCBCCBDADCDDDDCBCCBDABAABCCDCBDADCADBDBACCAAACDADBDCDADCCCADCABCBDADDABCACDDDBDCDADAABCBDDDACBADCABAAABDCDAABDAABAACAACBCDAABCCDCACDCDDAADCDBDBCBBBBCBACBCBDABAADDCABBDCBCCACDDBCACDCBBABDCCBCCAAADCCAACCBCCAABDCAAADBBABACAABBBACDBBDDAACCADBDACCADCACBACDADCADCDCCCAACBCCABBCDCAABBDCCBCCCBADDBBACADBCBBDABCCAABCCAABACBDCBDDABBCADADDBBDCBDAAADAABACCAADADCABDBBDAADBBADCABACDBACDABDBACCBAABBCABDDDBABCDCBDDBBDADCAACACABBBCDAABDBADDBAADDABCABCBBCAADBBBBCAADBCCCCAADBCBDDBBADCDCDCCCCAADABDBDBCBADDDBDDBBDDCCADAADAAADCBDDADCDADCCDAADCBBDBCACCABDACCDDCCCCADCCADAADDBDBDBCBACDCCCCBDCACABABCDCDADCDCAABADCACCAACBBAACABDAACCDDDBBCBABBBBBCCDCBBACDABDBCDCACBDDABBCDACBBAACAABBBABADCBDBABADAACABCDDADDBBCDDCDCBBBCAAABCCCBCCBDDDCAAADBCDCADBCACBDCDABCBDBABCDCABBABADBDCBDBBCCDBACDCBCBAAAAABBCCBCCBBCABBCADBBDCCCCBDCDCDBDCDBBADBCCCCADBCABBDBBDDCBDACBDCBACAACCDDDCBCDDDBBDABADBCDCDBBDCBBAACADACDABBCCDCDCDABDCBCBCBCBDACCACBCDCACDACDDCCDDBDBDDCCADDABCDCAADAADCBCDCBBCBCAADBCCCABBCBCCADBDDDBACCDBBBADCCBBCCBBBAADAADBDCADCCAABDDBAAABBBCDABACBBBCCCDDBDACDCBAADBBBABBBBDACCADACBBADCDCABADBDCCACDABDACBDCDCCAABABBCACBDDAADCBBDDCDBCDCDBCADADBBCDCCBADABDCABACABCBBAABACDBDCCDDACDDDADBBCAACDCBCAABDACCAAAACDAAAABCCADADBDACBCBABCACDCBDCBDDCBDBAAADCCDDBADBDADBDBDCCDCADBBDADCCDDDDBACDDDCACCCCDBAABDDAAACDDDACCDBBABBACCDCCDBABBDDCBCCCCDBBDBBADBDDDDABDDABDCCCACCCCABAACBBCDADBAADCBBCBCABCABDACAADACCCCADAAACDABCAAADAAACBDCAACBCAADBDABDABBBAACCDCDAACDBCDDAAADCCCDCACCBDADAADBDDACCDBBDACADCBCBDBCBDDBABDCACDACACBACAACAADADBCDDBBCACCCBCCCDCCAABACADCAADCBDCADDBAABDCBDDDAABCBBDCDCCCDABCAABCBCDBCDBCCDCBABBAADDDCDADAACCABCCDDDDDDCBBBBADDDADBCCBCADDDDBDABCCDBBADCABAACAACDCACADDBBBABCDDBABBBCAADBAAAADABDCDDBDDCCBDDBCACDABCDADABBDBCCDBAACCCCCDDCCACDBCDCBCAADCCDABCBABCDBCBAADDCBACBDDDDDCAABDBABCABBCDBADCCACCACDBDCBBABBCADCDDBDDDCDCBDADABDDDBACCCACDCDADDDDBDACBAAACCDACBDDABDBCBCCDBDBADBAAACBADABABACBACDBBBAADBCCDDBACBABABDAAABAAADDACCBCBBDBDBADABBACBBBBDCDDDCBBACDBCBABDAADCBCBABDCCCBCACBBAABCADCBDBDCBDDBCBBDDDAACDCDDDCADDBDBBACBBABABBABDCABDCDACDCDBAADDCCCCDDBABCBDCDCCBADDABCDBACCADDCCABDDDDBBACCDDBCCAAAACACBCBDBDACDDBDACCABCACDCBCCACBAAABABDCACBDDBCCDDABCACBDDCDDDBABCDDDBDCDDCDBDABBBACDDCCDDCDADADBAABAABDDADBDCDAAACADBBACDCBAAAACBCBCACDADBBCDAABADABAADCBADBBABDDDACBDABDABBBCBBBBCCDACABBBADCCACBBCABBBAADBDDCBCAACADDDDDCDADCDACADDADBDDDBCDCCCDBDCCBBDABBCDBDCADCBAACADDBBCACBBDABCDAACBCCBCDDBDDDDADBCCBCDBABDDBABDAAADBDCBABBDDBDCCDBCBDABBCABCACCBDDCBDDCBADBABCDCDCCCCDCCCBBABDDADADAACCACDDBABCADBBCDCCABDCCBCCADCDCACCACBCDDBDCCCAACDCCBBCACABCDCCDBCACBDCADDACDDBBADCAACAAAABDBBDBDDDBACCACBADCAAADCDBCCDBADDCCCCBAACDDCABABBBABBBDDBCBBDDABAABCABDBBBCDDBBABACCDBBDDADDABCCBBCBBBCDCABDDDDCACABBCDBAACDADCCCDBAADBDDDCABABACBDDAABDCBABAAAAAAABDDBCCDDACDCBDADDCDACCDBCBADCBDDCDDBDCDCDDDCBDDCDCCDDDCDAADACDDBDBBCDBBDBCBBADBABCBDCBCBCDCADBBABCCADDDBDCADDDADABCABABCAADBCADBCCBBCBBACAAABAADBBCCCCAADBDBDDACDAACDCBBDCABBCDDCACADBBBDAADDDBBBABADACBCDBBCCBBDCBBBBCBBDDABCBABCBDACBBABAADDCCAABBCDCDABCAAADCCBDABDADBBACDDCCBDDBCDBBDDDCBACBCACBADCCAABAADBACBABBBDBCBDBBDADCAADCBAACCBBCDDCDCDCDDBABACCCCACDACCDACCCDBDCCDBABBBBDDCCBDCBBBDBBCDCBCBCBCBDABDAABDACBACACAABDBDDDBABCBACADBCCABCDDBACBBCBBDDDDADDCABBDACABDAADABCBCCACACDACCDCCDDDAAABBBBBDDCBBCDCACADCBDCCBABBACDBBCCABBDDDACABDDCADBCBACCADBABCBBACDDACADABAACDDCBDABADDBADBDACCBCBBAADADDBACBDDDBBDDADCADDAADBACCCAACADCBACAABDADBAACAACBBCBCCDACDBCBBBCCDCDDADCCABDADCDDACACDCCBCADADBABCACCDDBABBBDBADDCDCBBDAABDCBBBCACADADBCBBCABDBCBACADDDDACBDABDDCBCDDCBCCABBACCABBACABCABDBACBCCCDCBBDBACCDBDCDADCCBDBDAABBCCDDCBCADBADADAABCDCADDCCBCCCCBDDDCDCBBAACCDADABBBBBCAAACBDBDACBBBDBCDDBCBCCADBADDDCBADABBACCAAACCADBBCDCDABBCDBDDCABBACCADCCBCCCABBBCDABDACDBDBDDCCDBDDDDCBDDCADDDCAACACDDDDCACADDCBCDDDADDBDBACACCBBDDAADDCACACBCCDCADDACBBBCCDCCBCDDADCBDBDCDCACBCBBABDADAADCBACADDACDDADBDBCCABDDBCCAAABCCCACCBBADDDBBABDACDDBDAABAADDDAACAAADDDCDABCBCDAABABDBDBDBDBDDADADDCCCDACBCADBABCDBCAAACBDCACAAABBCDADBAABDCDBBCBACBDCCDADAABDDDABCADAABCADCABDDDADBAAAACBAAADAABBDDBCAACCBDBCDCBDCCDDDBBDDACAABDACABABAACBDAACCBADACACCDBBABCABADBAAACADAACDDBDDAAABABAADDADCABDAADBCCDDBBABDCCACDCADCCBAABADCDADDDBCCBBCCCBCCBCCCBACDCBDABABCCCCCAACDDCCBCBAABADDABACADCBCACCCBCDAACBBADBDDBACAAABBCCBACCBCDCABBCDDCACABACDAACBDDBCBDDCACABDCDACDDDDBAAADBBADDACBDCBCADDDBCBCDDBDDDDBDBCAABABBDBACADDCBABABADCAADCCCDDDADBBDBBDCBCDBDDBCCBDCACABDBDBDCADDADDDBDCDDBDDBACCADDABAACDADDBACCBAADADCACDADBABCCDCBCABCDCCDDAAACCCBDBAAACDBCACBDCBDDBCCBBCBAADCBCAABCADCDCABCADDBACAACBDDBCADACBACBCBCBCDCCBBBAAABDABADBCBCBCAADCCBAAACDABCDABDDDCCABAABACDCDADDBBADCAADBBCCDABABABABCACDBABCDBCCCDDCDCABDDDBACDCDABABDACCACABCDBDBDBADCACCDACDDDDDAACCDAACBCDCDBAAABDAACABABABABAABDBAAABDDDABAABBCBAABBBDCDABCDBCABDCDDBADADAAACBCBABBABBAADACCBACCCDDDCCCACBCDBBDCDCDBBACCDBBDBADBDBBCCAABABDBBDDBDBACBACDACBADDBABBCCCBBDDBDDABBDAAABDDDBBBBDAADBCDDADBBBBAAAADDADABADABBDCAABDCCCBCDADABACCDABDBCDBACDBCDCBDDADABACDDADBDADBBDDAABBCBABABCDAAABADCACDCBCBACABDBABAACAACBBAAADBDADADABCBCBBDADCCBBCACDDABABCDDDCBBDDDBBCCCABCCBACDDCACADCCBADDCBABCCDCBDCDCCBDBDDDAADCCADDDABCDCCABDDDAACACDCCAAABCADBBDDCDBBAADBAABDAABAACDBDBDCCDAAABBACDBBBBDBCCACDCCDADABADCDCBDABBBBCDADDABABCCCCBACAADAADCDBCDACDACABACBCABBCBCADBBBDDBCBACDDBCBCBDDBDCDDBBADDCBCBBACACDDBCBCCABDBBDACAADBDDADADBCACDDABDDDBABCDDABDDCABCCACCDBBAAACCABCCCBBCACCBDAAADACCBCBBBBCBDBBCCBBBBCBDABDBABAACBADABCBAADAADCBAACABACBABBBADDBAAACBACCDDBCCACBDBABBAADCACCDAABDDADABCBDBBCBCAABCABADDDCBBBBCDBCBDDADBCBCACAADABCDBAADCBDCBBBABDCDCBACCAACAAABABBCDCBADBABCCBDDBBDBCDBCCABDCBBCADACCADACDBCCDDAACCBBDCCADDBCDBCCBAADCABBBBCBCDBDCDCCABDDDAABDDDBBCBDBDDBADCDCCDBCAABDACBDCDCDBBBADABBBAACCACBCDCDACABBCBBDCCADBDCACACCCDBDBBCDBCBCCBCBBBDBCADBDCACDBDCAAAADDDACDBBDABBAABCACDABBDBBBDBAACADBCCADDAABDBACDDDAAADACBADCBDBDCACDDBDAABBADBCBCADBCDBAACCDCDDDACABDDADBAACBBCDCDADAADDCBAADAACDBBCBBAABCBDCCACBCDDDDACDCADBCBBABDDDBACCDDCDDDACCBDCCAADACACDACBDBDDDBDCACABABCCDDDBABBABADBCBABBCDBAADCABABCBACBDDDACABCCADDBADADAAADBCDAACADBBCCDCABADDCCBCCCBCDAACCBACDDDBAABCBACCABBAACCDCDDADDBDABABCCBDCDDAAACBCAACDBACBACDCDCDDCCCACCBCADCBBCCDBDBAACBCBAABADDCAABCBCCDCBBABAAABCBABBABBAACBDADCADCBCDBBDDACDCBADDDBCDCBAACCBDCCDCACABBCAACDABAABACCDAADBBDDDBADBBADDDBACCCBDCBADABDCCCCDCACCDDAACADCBBBBBDCDABDCDBDADCDDAAADDBCCCDADCCAACBCCDBDADACDBBCCDCCACBCCDDDDBCAADCBDCAACBDCCCCDACDBCCDCBDCBCCCBDDCBBBACBACCDBCAAAABDBCACCBADADDCAACCDDBCBABACBBADBBB", 1000000));


    }

    private HashMap<Character, HashMap<Character, Character>> createProteinMutationMap(){

        HashMap<Character, HashMap<Character, Character>> map = new HashMap<>();

        HashMap<Character, Character> mutationMap = new HashMap<>();
        mutationMap.put('A', 'A');
        mutationMap.put('B', 'B');
        mutationMap.put('C', 'C');
        mutationMap.put('D', 'D');
        map.put('A', mutationMap);

        mutationMap = new HashMap<>();
        mutationMap.put('A', 'B');
        mutationMap.put('B', 'A');
        mutationMap.put('C', 'D');
        mutationMap.put('D', 'C');
        map.put('B', mutationMap);

        mutationMap = new HashMap<>();
        mutationMap.put('A', 'C');
        mutationMap.put('B', 'D');
        mutationMap.put('C', 'A');
        mutationMap.put('D', 'B');
        map.put('C', mutationMap);

        mutationMap = new HashMap<>();
        mutationMap.put('A', 'D');
        mutationMap.put('B', 'C');
        mutationMap.put('C', 'B');
        mutationMap.put('D', 'A');
        map.put('D', mutationMap);

        return map;
    }

    String pmix(String s, int k) {
        /*
         * Write your code here.
         */
        int position = (s.length()-1)*2;
        StringBuilder proteinString = new StringBuilder();
        StringBuilder mask = new StringBuilder();
        StringBuilder secondPart = new StringBuilder();
        for (int i = 0; i < s.length(); i++){
            if (i == 0){
                mask.append("11");
                secondPart.append("00");
            }else {
                secondPart.append("11");
                mask.append("00");
            }
            String append ;
            switch (s.charAt(i)){
                case 'A':
                    append = "00";
                    break;
                case 'B':
                    append = "01";
                    break;
                case 'C':
                    append = "10";
                    break;
                default:
                    append = "11";
            }
            proteinString.append(append);
        }
        byte secondXor = Byte.parseByte(secondPart.toString());
        byte protein = Byte.parseByte(proteinString.toString());
        byte maskNum = Byte.parseByte(mask.toString());
        while (k-- > 0){
            long b = (protein&maskNum)>>position;
            long a = (protein&secondXor)<<2;
            protein = (byte) (protein^((byte)a^b));
        }

        String result = Long.toBinaryString(protein);
        int counter = 0;
        StringBuilder finalProtein = new StringBuilder();
        int index = result.length()-2;
        while (index > -1){
            String append ;
            switch (result.substring(index, index+2)){
                case "00":
                    append = "A";
                    break;
                case "01":
                    append = "B";
                    break;
                case "10":
                    append = "C";
                    break;
                default:
                    append = "D";
            }
            finalProtein.append(append);
            counter++;
            if (index-2 > -1) {
                index -= 2;
            }else {
                break;
            }
        }

        if (index != 0){
            counter++;
            finalProtein.append("B");
        }

        while (counter++ < s.length()){
            finalProtein.append("A");
        }

        return finalProtein.reverse().toString();
    }

    int[][] sortMatrixByOccurrences(int[][] m) {

        HashMap<Integer, Integer> set = new HashMap<>();
        for(int i = 0; i < m.length; i++){
            for(int j = 0; j < m[0].length; j++){
                set.put(m[i][j], set.getOrDefault(m[i][j], 0)+1);
            }
        }

        List<Map.Entry<Integer, Integer>> list = new LinkedList<>(set.entrySet());

        Collections.sort(list, (t1, t2) ->{

            if (t1.getValue().equals(t2.getValue())){
                return t1.getKey()-t2.getKey();
            }
            return t1.getValue()-t2.getValue();
        });

        Map.Entry<Integer, Integer> entry = list.remove(0);
        int value = entry.getKey();
        int count = entry.getValue();

        int i = m.length-1;
        int j = m[0].length-1;

        while(i > -1){
            while(j >= 0) {
                int x = i;
                int y = j;

                while (x > -1 && y < m[0].length) {
                    if (count == 0) {
                        entry = list.remove(0);
                        value = entry.getKey();
                        count = entry.getValue();
                    }
                    m[x--][y++] = value;
                    count--;
                }

                j--;
            }
            i--;
            j = 0;
        }
        return m;
    }

    @Test
    public void test21(){

        int[][] matrix = new int[][]{
                {1,4,-2},
                {-2,3,4},
                {3,1,3}
        };

        Assert.assertNotNull(sortMatrixByOccurrences(matrix));
    }

}


